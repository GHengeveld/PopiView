==================================
PopiView Installation Instructions
==================================

Requirements
============
* Python 2.6
* MySQL server
* Subversion
* Python Distribute
* Python-dev

Getting the files
=================
First, do an SVN checkout from the Infrae repository to the destination 
directory on the server::

 svn checkout https://svn.infrae.com/PopiView/tags/PopiView-1.0b popiview

All files should now be downloaded and stored in the 'popiview' folder.

Setting up MySQL and application configuration
==============================================
Now we have to setup the MySQL database. This requires root access to mysql so
we can add a new user. Make sure to set a more secure password than the one
in the example below::

 mysql -u root -p
 CREATE DATABASE popiview;
 GRANT ALL ON popiview.* TO popiview IDENTIFIED BY 'securepassword';
 exit

So replace 'securepassword' with another password, but keep the quotes.

.. Hint:: Troubleshooting: `mysql_config not found`_

Now we will create the configuration file with the new settings::

 cd popiview
 cp profiles/production.cfg profiles/popiview.cfg
 vim profiles/popiview.cfg

Alternatively you can use another texteditor instead of vim, like nano or emacs.

Change the values under [dbconfig] to match the database we just created.
Usually it will only require the password (dbpass) to be changed. If the port 
number has to be modified (default is 3033), add the following lines::

 [settings.ini]
 port = 1234

Under [siteconfig], edit the baseurl value to match the absolute URL of the
application once it's installed. This is required to ensure hits are logged to
your server. The URL should not have an ending slash.
 
Building the application with buildout
======================================
Now that the configuration is done we can run the bootstrap and buildout::

 python2.6 bootstrap.py --buildout-profile profiles/popiview.cfg

.. Hint:: Troubleshooting: `AttributeError in bootstrap.py`_

This will install all dependencies and create a buildout script which we will
run next::

 bin/buildout

.. Hint:: Troubleshooting: `Python.h not found`_

This will generate bin/test script and bin/paster script. To make sure the
application was properly installed, start paster (the application server)::

 bin/paster serve settings.ini

This should start the server and display the IP and port number on which the
application is served::

 Starting server in PID ####.
 Starting HTTP server on http://0.0.0.0:3033

To exit paster, press Ctrl + C.
To start paster as a deamon (in the background), run it like this::

 bin/paster serve --daemon settings.ini

You can stop the daemon like this::

 bin/paster serve --daemon settings.ini stop

Don't forget to restart it after installation is complete.

Apache proxy configuration
==========================
First we have to set a password so the application is protected. For this we 
have to create a .htpasswd file::

 htpasswd -c popiview.htpasswd pvuser

Make sure to choose a proper password. The username will be 'pvuser', or you 
can choose another.

To make Apache serve the paster application, add this to your Apache 
configuration file and edit the settings to match your Apache installation::

  <VirtualHost *:80>
    ServerName popiview.example.com

    ProxyPreserveHost on
    DocumentRoot <full path to popiview>/static

    RewriteEngine on
    RewriteRule ^/favicon.ico$ /static/favicon.ico
    RewriteRule ^/static/.* - [L]
    RewriteRule ^/(.*)$ http://localhost:3033/$1 [P,L]

    <Location "/static">
      Satisfy Any
      Order deny,allow
      Allow from all
    </Location>

    <Location "/favicon.ico">
      Satisfy Any
      Order deny,allow
      Allow from all
    </Location>

    <Location "/image.gif">
      Satisfy Any
      Order deny,allow
      Allow from all
    </Location>

    <Location />
          AuthUserFile /etc/apache2/popiview.htpasswd
          AuthName "Popiview"
          AuthType Basic
          require valid-user
      Order deny,allow
      Allow from all
    </Location>

  </VirtualHost>


You have to replace values of the following directives:

* ServerName : the hostname you will use for accessing popiview.
* DocumentRoot : the path to static folder of your popiview installation.
* RewriteRule (#3): port number if you changed it
* AuthUserFile : if you created the htpasswd in a different location.


Include PopiView JS code
========================
In order to catch information of incoming visitors on the website, a piece of
JavaScript code must be included in every page of the website. The exact
location of the code and installation into the website depends on the website's
underlying structure, often a CMS or framework. The goal is to include the JS
code on every page, as close to the end of the HTML <body> section as possible.
Usually this will mean a modification to the website engine's footer template
file. If you already have a system like Google Analytics installed, the PopiView
installation procedure is the same, and you can just put the PopiView code right
after (or before) the Google Analytics code. The code to be included is the
following::

 <script type="text/javascript" 
  src="http://popiview.example.com/static/popiview.js"></script>
 <script type="text/javascript">pv();</script>

The exact URL for the JS file depends on the installation path for PopiView, as
described in the Apache configuration file.

Once this code is included in every page, and the application is running, you
should see incoming hits in the Hit Monitor, which means the application is
succesfully installed.

Automated database cleanup
==========================
In order to prevent the database from growing to virtually unlimited
proportions, we have to clean up old records automatically. This is achieved by
running a daily cron job. For this we have to edit the crontab::

 sudo crontab -u username -e

The username should be replaced with the linux username which is running the
PopiView application server (bin/paster serve). Usually it will be the username
you're currently logged in as. With this command a text editor will appear in
which we have to add this line::

 # m h dom mon dow command
 0 4 * * * /path/to/popiview/bin/cleanup --config-file /path/to/popiview/settings.ini --days 7

This will run the cleanup utility every day at 04:00 hours. It will cleanup all
records older than 7 days. The paths must match with the PopiView installation
path (defined from disk root).

Troubleshooting
===============
If you run into problems during installation, this error troubleshooting guide 
may help.

mysql_config not found
----------------------
You should install mysql first. This includes mysql-server, mysql-common and 
python-mysqldb, among others.

AttributeError in bootstrap.py
------------------------------
If you get this error: 'NoneType' object has no attribute 'location'

Install python distribute:
http://pypi.python.org/pypi/distribute#installation-instructions

Python.h not found
------------------
You should install the package: python-dev
